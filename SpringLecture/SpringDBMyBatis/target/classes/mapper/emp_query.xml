<?xml version="1.0" encoding="UTF-8"?>

<!-- mapper 3.0 -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mycom.mybatis.dao.EmpDao">
	<select id="empDetail" parameterType="int" resultType="com.mycom.mybatis.dto.EmpDto">
		select employeeId, first_name, last_name, email, hiredate 
		from emp where employeeId = #{employeeId}
	</select>
	
	<!-- return이 Conllection이면 DTO만 기술( List<Dto> -> Dto만 작성 )  -->
	<select id="empList" resultType="com.mycom.mybatis.dto.EmpDto">
		select employeeId, first_name, last_name, email, hiredate 
		from emp
	</select>
	
	<!-- 리턴이 primitive TYPE인 경우 별도로 기술하지 않는다. -->
	<insert id="empInsert" parameterType="com.mycom.mybatis.dto.EmpDto">
		insert into emp (employeeId, first_name, last_name, email, hiredate) 
		values (#{employeeId}, #{firstName}, #{lastName}, #{email}, #{hireDate})
	</insert>
	
	<update id="empUpdate" parameterType="com.mycom.mybatis.dto.EmpDto">
		update emp 
			set first_name= #{firstName}
				, last_name= #{lastName}
				, email= #{email}
				, hireDate= #{hireDate} 
		where employeeId = #{employeeId}
	</update>
	
	<delete id="empDelete" parameterType="int">
		delete from emp where employeeId = #{employeeId}
	</delete>
	
	
	<select id="empListLike" parameterType="string" resultType="com.mycom.mybatis.dto.EmpDto">
		select employeeId, first_name, last_name, email, hiredate 
		from emp 
		where first_name like CONCAT('%',#{searchWord})
	</select>
	
	
	
	<!-- ResultMap -->
	<resultMap type="com.mycom.mybatis.dto.EmpDto" id="empMap">
		<result property="employeeId" column="employeeId"></result>
		<result property="firstName" column="first_name"></result>
		<result property="lastName" column="last_name"></result>
		<result property="email" column="email"></result>
		<result property="hireDate" column="hiredate"></result>
	</resultMap>
	
	<!-- ResultMap2 -->
	<resultMap type="com.mycom.mybatis.dto.EmpDto2" id="empMap2">
		<result property="employeeId" column="employeeId"></result>
		<result property="firstName" column="first_name"></result>
		<result property="lastName" column="last_name"></result>
	</resultMap>
	
	
	<!-- Param: basic -->
	<!-- id: Dao의 method 이름을 나타낸다, param과 return 값도 맞춰야 한다. -->
	<select id="empListResultMap2" parameterType="string" resultMap="empMap2">
		select employeeId, first_name, last_name 
		from emp 
		where first_name like CONCAT('%', #{searchWord})
	</select>
	
	<select id="empListResultMap" parameterType="string" resultMap="empMap">
		select employeeId, first_name, last_name, email, hiredate 
		from emp 
		where first_name like CONCAT('%', #{searchWord}, '%')
	</select>
	
	
	<!-- Param: Map -->
	<select id="empListParameterMap" parameterType="map" resultMap="empMap">
		select employeeId, first_name, last_name 
		from emp 
		where first_name = #{firstName} and last_name = #{lastName}
	</select>
	
	<!-- @Param -->
	<select id="empListParameterMap2" parameterType="map" resultMap="empMap">
		select employeeId, first_name, last_name 
		from emp 
		where first_name = #{firstName} and last_name = #{lastName}
	</select>
	
	<!-- Param: Dto -->
	<select id="empListParameterMap3" parameterType="map" resultMap="empMap">
		select employeeId, first_name, last_name 
		from emp 
		where first_name = #{firstName} and last_name = #{lastName}
	</select>
	
	
	<!-- Dynamic SQL -->
	<select id="empListWhereIf" parameterType="map" resultMap="empMap">
		select employeeId, first_name, last_name, email, hiredate
		from emp 
		<where>
			<if test="firstName != null">
				first_name = #{firstName}
			</if>
			<if test="lastName != null">
				and last_name = #{lastName}
			</if>
			<if test="email != null">
				and email = #{email}
			</if>
		</where>
	</select>
</mapper>

